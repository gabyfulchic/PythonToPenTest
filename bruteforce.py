from itertools import product
from hashlib import md5
import re
#from time import time
import datetime

#alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890;_@#'
#alphabet = 'abcdefghijklmnopqrstuvwxyz1234567890'
alphabet = '0123456789abcdefghijklmnopqrstuvwxyz'
characters_number = 6
empreintes = []
users = []
found_password = ''
duration = ''

def formatage_des_empreintes():
    shadow_file_location = '/home/gaby/Securite/shadow_test'
    # Lecture du fichier etc/shadow récupéré et stockage des lignes sous tableau
    with open(shadow_file_location) as f:
        shadow_array = f.readlines()

    # Suppression des \n dans les lignes du tableau
    shadow_array = [x.strip() for x in shadow_array]

    # ici on va parser et récupérer les empreintes dans un format pure.
    for shadow in shadow_array:
       splited_shadow = shadow.split(':')
       user_name = splited_shadow[0]  
       longueur = len(splited_shadow[1])
       # On ne récupère que les empreintes succeptible d'avoir été hashé par l'aglo
       # de chiffrement md5()
       if longueur == 35:
           full = splited_shadow[1]
           user_shadow = full[3:35]
           empreintes.append(user_shadow)
           users.append(user_name)

def affichage_du_menu():
    ### Fenêtre de présentation du programme dans le terminal d'exécution du script
    print('\n#############')
    print('####users####')
    print('#############\n')

    for user in users:
        print ('->', user)

    user_input = input('\nVeuillez entrez l\'utilisateur dont vous souhaitez craquer le password : ')
    if user_input in users:
        print('\nVous avez choisi l\'utilisateur : ', user_input)
        bruteforce(user_input)
        #dictionnary(user_input)
    else:
        print('\nL\'utilisateur choisi n\'est pas valide et présent dans la liste. ')
        affichage_du_menu()

def bruteforce(user_chosen):
    #dico = []
    #dico_shadows = []
    # Génération du dictionnaire de mot de passe claire (libraririe)
    starter = datetime.datetime.now()
    for each_characters in product(alphabet, repeat=characters_number):
        word_generated = ''.join(each_characters)
        #dico.append(word_generated)
        user_index = users.index(user_chosen)
        user_empreinte = empreintes[user_index]
        hash_output = md5(word_generated.encode('utf-8')).hexdigest()
        if user_empreinte == hash_output:
            end_of_time = datetime.datetime.now()
            duration = end_of_time-starter
            itworks(user_chosen, word_generated, duration)
    # Génération du hash de chaques mdp de la librairie
    #for word in dico:
        #dico_shadows.append(md5(word.encode('utf-8')).hexdigest())

    # Récupération de l'index du user pour lui associer son empreinte
    #print(user_chosen)
    #user_index = users.index(user_chosen)
    #user_empreinte = empreintes[user_index]
    
    # Fonction principale de détermination et comparaison
    #starter = time()
    #for shadow in dico_shadows:
        #if user_empreinte == shadow:
            #end_of_time = time()
            #duration = end_of_time-starter
            #found_index = dico_shadows.index(shadow)
            #found_password = dico[shadow_index]
            #itworks(user_chosen, found_password, duration)
    itfailed(user_chosen)

def dictionnary(user_chosen):
    dico_file_location = '/home/gaby/Securite/dico_mini_fr'
    # Lecture du fichier dictionnaire récupéré et stockage des lignes sous tableau
    with open(dico_file_location) as f:
        dico = f.readlines()

    # Suppression des \n dans les lignes du tableau
    dico = [x.strip() for x in dico]
    starter = datetime.datetime.now()
    for word in dico:
        user_index = users.index(user_chosen)
        user_empreinte = empreintes[user_index]
        if user_empreinte == md5(word.encode('utf-8')).hexdigest():
            end_of_time = datetime.datetime.now()
            duration = end_of_time-starter
            itworks(user_chosen, word, duration)
    itfailed(user_chosen)


def itworks(user, passwd, duree):
    print('\n###############################################################')
    print('###############################################################')
    print('###############################################################')
    print('###############################################################')
    print('###############################################################')
    print('#####################                    ######################')
    print('#####################       (▀̿Ĺ̯▀̿ ̿)       ######################')
    print('#####################  The French Hacker ######################')      
    print('#####################                    ######################')
    print('#####################                    ######################')
    print('###############################################################')
    print('###############################################################')
    print('###############################################################')
    print('###############################################################')
    print('###############################################################\n')
    print('Le mot de passe de l\'utilisateur ', user, ' se trouve être ', passwd, ' !!!! Et ça a mit seulement : ', duree, ' secondes..')
    output_file = open("result.txt","w+")
    output_file.write('Bruteforce : mot de passe : ')
    output_file.write(passwd)
    output_file.write(' ')
    output_file.write(str(duree))
    output_file.close()
    exit()

def itfailed(user):
    print('\n######')
    print('Il semblerait que le mot de passe de l\'utilisateur ', user, ' ne se trouve pas dans la libraire générée par itertools.product avec mon alphabet spécifié. :/ ')
    print('######\n')
    exit()

#dictionnary()
formatage_des_empreintes()
affichage_du_menu()
#bruteforce()
